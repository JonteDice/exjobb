import requests
from bs4 import BeautifulSoup
import yaml
import json

API_BASE_URL = 'http://127.0.0.1:8000/'

def test_sql_injection(endpoint):
    response = requests.get(f'{API_BASE_URL}/{endpoint}', params={'id': "1' OR '1'='1"})
    if 'SQL syntax error' in response.text:
        return True
    return False

def test_xss_injection(base_url):
    # Retrieve Swagger data
    response = requests.get(f'{base_url}/doc')
    if response.status_code != 200:
        print(f'Error: Unable to fetch Swagger UI page. Status code: {response.status_code}')
        return
    
    swagger_data = yaml.safe_load(response.text)
    paths = swagger_data.get('paths', {})

    # Define payloads for XSS testing
    xss_payloads = [
        "<script>alert('XSS')</script>",
        "<img src='x' onerror='alert(\"XSS\")'>",
        # Add more payloads as needed
    ]

    # Iterate through endpoints and send requests with payloads
    vulnerable_endpoints = []
    for path, methods in paths.items():
        for method, info in methods.items():
            # Handle cases where 'info' is a list
            if not isinstance(info, dict):
                continue
            
            parameters = info.get('parameters', [])
            if parameters:
                for param in parameters:
                    # For each parameter, send requests with XSS payloads
                    for payload in xss_payloads:
                        data = {param['name']: payload}
                        response = requests.request(method.upper(), f'{base_url}{path}', data=data)
                        # Analyze response for indications of XSS vulnerability
                        if payload in response.text:
                            vulnerable_endpoints.append((path, param['name'], payload))
    
    # Report findings
    if vulnerable_endpoints:
        print("Vulnerable endpoints:")
        for endpoint in vulnerable_endpoints:
            print(endpoint)
    else:
        print("No XSS vulnerabilities found.")

def get_all_endpoints(base_url):
    response = requests.get(f'{base_url}/doc')
    if response.status_code != (200 or 201):
        print(f'Error: Unable to fetch Swagger UI page. Status code: {response.status_code}')
        return []
    
    swagger_data = yaml.safe_load(response.text)
    paths = swagger_data.get('paths', {})
    endpoints = []
    endpoints_with_user_input = []
    for path, methods in paths.items():
        endpoints.append(path)
        # for method, info in methods.items():
            
    
    return endpoints

def get_user_input_endpoints(base_url):
    response = requests.get(f'{base_url}/doc')
    if response.status_code != (200 or 201):
        print(f'Error: Unable to fetch Swagger UI page. Status code: {response.status_code}')
        return []
    
    swagger_data = yaml.safe_load(response.text)
    paths = swagger_data.get('paths', {})
    endpoints_with_user_input = []
    for path, methods in paths.items():
        for method, info in methods.items():
            if isinstance(info, dict):
                parameters = info.get('parameters', [])
                if parameters:
                    # Check if any parameter accepts user input
                    for param in parameters:
                        if param.get('in') in ['query', 'path', 'formData', 'body']:
                            endpoints_with_user_input.append(path)
                            break  # No need to check further if one parameter accepts input
                    else:
                        continue  # No parameter accepts input, skip to the next endpoin
            
    
    return endpoints_with_user_input


if __name__ == '__main__':
    endpoints = get_all_endpoints(API_BASE_URL)
    # endpoints = get_user_input_endpoints(API_BASE_URL)
    print('All Endpoints:')
    for endpoint in endpoints:
        if test_sql_injection(endpoint):
            print(f"SQL injection vulnerability found in endpoint: {endpoint}")
        else:
            print(f"No SQL injection vulnerability found in endpoint: {endpoint}")

    test_xss_injection(API_BASE_URL)